<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="$(SolutionDir)\packages\Gu.Units\lib\net45\Gu.Units.dll" #>
<#@ assembly name="System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="Gu.Units" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".xaml" #>
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:l="clr-namespace:Gu.Wpf.PropertyGrid"
                    xmlns:propertyGrid="http://gu.se/PropertyGrid"
					xmlns:numeric="http://gu.se/NumericInput">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Gu.Wpf.PropertyGrid.UnitSettingControls;component/Themes/BaseStyles.xaml" />
    </ResourceDictionary.MergedDictionaries>
<#
	    var quantities = typeof (Length).Assembly
										.GetTypes()
										.Where(x => !x.IsInterface)
										.Where(x => x.GetInterfaces().Any(i => i == typeof (IQuantity)))
										.ToArray();
		foreach(var quantity in quantities)
		{
		#>
    <Style TargetType="{x:Type l:<#= quantity.Name #>SettingControl}">
        <Setter Property="OldValueStyle">
            <Setter.Value>
                <Style BasedOn="{StaticResource {x:Static propertyGrid:Keys.SettingRowOldValueStyleKey}}" 
				       TargetType="{x:Type TextBlock}">
                    <Setter Property="Text" Value="{Binding OldStringValue, RelativeSource={RelativeSource AncestorType={x:Type l:<#= quantity.Name #>SettingControl}}, StringFormat='Old value: {0}'}" />
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type l:<#= quantity.Name #>SettingControl}">
                    <Grid Margin="{TemplateBinding Padding}"
					      Background="{TemplateBinding Background}"
					      Style="{StaticResource {x:Static propertyGrid:Keys.RootGridStyleKey}}">
                        <!--  ReSharper disable Xaml.MissingGridIndex  (setting in styles for flexibility)  -->
                        <propertyGrid:HeaderBlock x:Name="PART_Header"
                                   propertyGrid:Grid.Cell="0,0"
                                   Text="{TemplateBinding Header}" />

                        <numeric:DoubleBox x:Name="PART_Value"
                                           MinWidth="{TemplateBinding ValueMinWidth}"
                                           MaxWidth="{TemplateBinding ValueMaxWidth}"
                                           propertyGrid:Grid.Cell="0,1"
                                           DecimalDigits="{TemplateBinding DecimalDigits}"
                                           IsReadOnly="{TemplateBinding IsReadOnly}"
                                           Validation.ErrorTemplate="{x:Null}"
                                           Value="{Binding ScalarValue,
                                                           RelativeSource={RelativeSource TemplatedParent}}" />

                        <propertyGrid:SuffixBlock x:Name="PART_Suffix"
												  propertyGrid:Grid.Cell="0,2"
												  Text="{TemplateBinding Suffix}" />

                        <propertyGrid:InfoPresenter x:Name="InfoPresenter" />
                        <!--  ReSharper restore Xaml.MissingGridIndex  -->
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

<#
		} 
		#>
</ResourceDictionary>