<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".xaml" #>
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:propertyGrid="clr-namespace:Gu.Wpf.PropertyGrid">
<#
		foreach(var nameAndXaml in new[]
		                               {
		                                   new NameAndXaml("StringRow", StringValueXaml),
		                                   new NameAndXaml("BoolRow", CheckBoxValueXaml),
		                                   new NameAndXaml("CheckBoxRow", CheckBoxValueXaml),
		                                   new NameAndXaml("ToggleButtonRow", ToggleButtonValueXaml),
		                                   new NameAndXaml("EnumRow", EnumValueXaml),
		                                   new NameAndXaml("SelectorRow", ComboBoxValueXaml),
		                                   new NameAndXaml("ComboBoxRow", ComboBoxValueXaml),
		                               })
		{
		#>

    <propertyGrid:RowControlTemplateSelector x:Key="<#= nameAndXaml.Name #>ControlTemplateSelector">
        <propertyGrid:RowControlTemplateSelector.PlainTemplate>
<#= GetPlainTemplate(nameAndXaml.Name, TextBlockHeaderXaml, nameAndXaml.Xaml, TextBlockSuffixXaml) #>
        </propertyGrid:RowControlTemplateSelector.PlainTemplate>

        <propertyGrid:RowControlTemplateSelector.TextBoxHeaderTemplate>
<#= GetPlainTemplate(nameAndXaml.Name, TextBoxHeaderXaml, nameAndXaml.Xaml, TextBlockSuffixXaml) #>            
        </propertyGrid:RowControlTemplateSelector.TextBoxHeaderTemplate>

        <propertyGrid:RowControlTemplateSelector.TextBoxHeaderAndSuffixTemplate>
<#= GetPlainTemplate(nameAndXaml.Name, TextBoxHeaderXaml, nameAndXaml.Xaml, TextBoxSuffixXaml) #>              
        </propertyGrid:RowControlTemplateSelector.TextBoxHeaderAndSuffixTemplate>

        <propertyGrid:RowControlTemplateSelector.TextBoxSuffixTemplate>
<#= GetPlainTemplate(nameAndXaml.Name, TextBlockHeaderXaml, nameAndXaml.Xaml, TextBoxSuffixXaml) #>              
        </propertyGrid:RowControlTemplateSelector.TextBoxSuffixTemplate>

        <propertyGrid:RowControlTemplateSelector.InfoTemplate>
<#= GetInfoTemplate(nameAndXaml.Name, TextBlockHeaderXaml, nameAndXaml.Xaml, TextBlockSuffixXaml, InfoPresenterXaml) #>
        </propertyGrid:RowControlTemplateSelector.InfoTemplate>

        <propertyGrid:RowControlTemplateSelector.TextBoxHeaderAndInfoTemplate>
<#= GetInfoTemplate(nameAndXaml.Name, TextBoxHeaderXaml, nameAndXaml.Xaml, TextBlockSuffixXaml, InfoPresenterXaml) #>
        </propertyGrid:RowControlTemplateSelector.TextBoxHeaderAndInfoTemplate>

        <propertyGrid:RowControlTemplateSelector.TextBoxHeaderAndSuffixAndInfoTemplate>
<#= GetInfoTemplate(nameAndXaml.Name, TextBoxHeaderXaml, nameAndXaml.Xaml, TextBoxSuffixXaml, InfoPresenterXaml) #>
        </propertyGrid:RowControlTemplateSelector.TextBoxHeaderAndSuffixAndInfoTemplate>

        <propertyGrid:RowControlTemplateSelector.TextBoxSuffixInfoTemplate>
<#= GetInfoTemplate(nameAndXaml.Name, TextBlockHeaderXaml, nameAndXaml.Xaml, TextBoxSuffixXaml, InfoPresenterXaml) #>
        </propertyGrid:RowControlTemplateSelector.TextBoxSuffixInfoTemplate>
    </propertyGrid:RowControlTemplateSelector>
<#
		} 
		#>
</ResourceDictionary>

<#+
	private class NameAndXaml
	{
	    internal readonly string Name;
	    internal readonly string Xaml;

	    public NameAndXaml(string name, string xaml)
	    {
	        this.Name = name;
	        this.Xaml = xaml;
	    }
	}

    private const string StringValueXaml = 
	@"                        <TextBox x:Name=""PART_Value""
                                 Grid.Row=""0""
                                 Grid.Column=""1""
                                 Focusable=""{Binding IsReadOnly,
                                                      RelativeSource={RelativeSource Self},
                                                      Converter={x:Static propertyGrid:InvertBoolConverter.Default}}""
                                 IsReadOnly=""{TemplateBinding IsReadOnly}""
                                 Text=""{Binding Value,
                                                 RelativeSource={RelativeSource TemplatedParent},
                                                 UpdateSourceTrigger=PropertyChanged}"" />
	";

    private const string CheckBoxValueXaml = 
	@"                        <CheckBox x:Name=""PART_Value""
                                  Grid.Row=""0""
                                  Grid.Column=""1""
                                  HorizontalAlignment=""Center""
                                  VerticalAlignment=""Center""
                                  Focusable=""{Binding IsReadOnly,
                                                       RelativeSource={RelativeSource TemplatedParent},
                                                       Converter={x:Static propertyGrid:InvertBoolConverter.Default}}""
                                  IsChecked=""{Binding Value,
                                                       RelativeSource={RelativeSource TemplatedParent}}""
                                  IsEnabled=""{Binding IsReadOnly,
                                                       RelativeSource={RelativeSource TemplatedParent},
                                                       Converter={x:Static propertyGrid:InvertBoolConverter.Default}}"" />
	";

	    private const string ToggleButtonValueXaml = 
	@"                        <ToggleButton x:Name=""PART_Value""
                                      Grid.Row=""0""
                                      Grid.Column=""1""
                                      Focusable=""{Binding IsReadOnly,
                                                           RelativeSource={RelativeSource TemplatedParent},
                                                           Converter={x:Static propertyGrid:InvertBoolConverter.Default}}""
                                      IsChecked=""{Binding Value,
                                                           RelativeSource={RelativeSource TemplatedParent}}""
                                      IsEnabled=""{TemplateBinding IsReadOnly,
                                                                   Converter={x:Static propertyGrid:InvertBoolConverter.Default}}"" />
	";

    private const string EnumValueXaml =
	 @"                        <ComboBox x:Name=""PART_Value""
                                  Grid.Row=""0""
                                  Grid.Column=""1""
                                  Focusable=""{Binding IsReadOnly,
                                                      RelativeSource={RelativeSource TemplatedParent},
                                                      Converter={x:Static propertyGrid:InvertBoolConverter.Default}}""
                                  IsReadOnly=""{TemplateBinding IsReadOnly}""
                                  ItemsSource=""{TemplateBinding EnumValues}""
                                  SelectedItem=""{Binding Value,
                                                         RelativeSource={RelativeSource TemplatedParent},
                                                         UpdateSourceTrigger=PropertyChanged}"" />
	";

    private const string ComboBoxValueXaml =
	 @"                        <ComboBox x:Name=""PART_Value""
                                  Grid.Row=""0""
                                  Grid.Column=""1""
                                  Focusable=""{Binding IsReadOnly,
                                                      RelativeSource={RelativeSource TemplatedParent},
                                                      Converter={x:Static propertyGrid:InvertBoolConverter.Default}}""
                                  IsReadOnly=""{TemplateBinding IsReadOnly}""
                                  ItemsSource=""{TemplateBinding ItemsSource}""
                                  SelectedItem=""{Binding Value,
                                                         RelativeSource={RelativeSource TemplatedParent},
                                                         UpdateSourceTrigger=PropertyChanged}"" />
	";

    private const string TextBlockHeaderXaml = 
	@"                        <propertyGrid:HeaderBlock x:Name=""PART_Header""
                                                  Grid.Row=""0""
                                                  Grid.Column=""0""
                                                  Style=""{TemplateBinding HeaderStyle}""
                                                  Text=""{TemplateBinding Header}"" />
	";

	    private const string TextBoxHeaderXaml = 
	@"                        <TextBox x:Name=""PART_Header""
                                 Grid.Row=""0""
                                 Grid.Column=""0""
                                 Focusable=""False""
                                 IsReadOnly=""True""
                                 Style=""{TemplateBinding HeaderStyle}""
                                 Text=""{TemplateBinding Header}"" />
	";

	    private const string TextBlockSuffixXaml = 
	@"                        <propertyGrid:SuffixBlock x:Name=""PART_Suffix""
                                                  Grid.Row=""0""
                                                  Grid.Column=""2""
                                                  Style=""{TemplateBinding SuffixStyle}""
                                                  Text=""{TemplateBinding Suffix}"" />
	";

	    private const string TextBoxSuffixXaml = 
	@"                        <TextBox x:Name=""PART_Suffix""
                                 Grid.Row=""0""
                                 Grid.Column=""2""
                                 Focusable=""False""
                                 IsReadOnly=""True""
                                 Style=""{TemplateBinding SuffixStyle}""
                                 Text=""{TemplateBinding Suffix}"" />
	";

	    private const string InfoPresenterXaml = 
	@"                        <propertyGrid:RowInfoPresenter x:Name=""InfoPresenter""
                                                       Grid.Row=""1""
                                                       Grid.Column=""0""
                                                       Grid.ColumnSpan=""2""
                                                       Style=""{TemplateBinding InfoPresenterStyle}"" />";

    private const string InfoTemplate =
        @"            <ControlTemplate TargetType=""{{x:Type propertyGrid:{0}}}"">
                <Border Margin=""{{TemplateBinding Padding}}""
                        Background=""{{TemplateBinding Background}}""
                        BorderBrush=""{{TemplateBinding BorderBrush}}""
                        BorderThickness=""{{TemplateBinding BorderThickness}}"">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height=""Auto"" />
                            <RowDefinition Height=""Auto"" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition propertyGrid:ColumnDefinition.Source=""Header"" />
                            <ColumnDefinition propertyGrid:ColumnDefinition.Source=""Value"" />
                            <ColumnDefinition propertyGrid:ColumnDefinition.Source=""Suffix"" />
                        </Grid.ColumnDefinitions> 
{1}
{2}
{3}
{4}
                    </Grid>
                </Border> 
            </ControlTemplate>";

    private const string PlainTemplate =
        @"            <ControlTemplate TargetType=""{{x:Type propertyGrid:{0}}}"">
                <Border Margin=""{{TemplateBinding Padding}}""
                        Background=""{{TemplateBinding Background}}""
                        BorderBrush=""{{TemplateBinding BorderBrush}}""
                        BorderThickness=""{{TemplateBinding BorderThickness}}"">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition propertyGrid:ColumnDefinition.Source=""Header"" />
                            <ColumnDefinition propertyGrid:ColumnDefinition.Source=""Value"" />
                            <ColumnDefinition propertyGrid:ColumnDefinition.Source=""Suffix"" />
                        </Grid.ColumnDefinitions> 
{1}
{2}
{3}
                    </Grid>
                </Border> 
            </ControlTemplate>";
    private static string GetInfoTemplate(string controlName, string headerXaml, string valueXaml, string suffixXaml, string infoXaml)
    {
        var updatedValueXaml = SetValidationTemplateToNull(valueXaml);
        return  string.Format(InfoTemplate, controlName, headerXaml, updatedValueXaml, suffixXaml, infoXaml);
    }

	private static string GetPlainTemplate(string controlName, string headerXaml, string valueXaml, string suffixXaml)
    {
        return  string.Format(PlainTemplate, controlName, headerXaml, valueXaml, suffixXaml);
    }

    private static string SetValidationTemplateToNull(string valueXaml)
    {
		if(valueXaml.Contains("Validation.ErrorTemplate"))
		{
		    return "Should not contain Validation.ErrorTemplate";
		}
        var builder = new StringBuilder();
        var rows = GetRows(valueXaml);
        var indentation = GetIndentation(valueXaml);
        for (int i = 0; i < rows.Length; i++)
        {
            if (i < rows.Length - 1)
            {
                builder.AppendLine(rows[i]);
            }
            else
            {
                builder.AppendLine(RemoveEndTag(rows[i]));
                builder.Append(indentation);
                builder.Append(@"Validation.ErrorTemplate=""{x:Null}"" />");
                builder.AppendLine();
            }
        }

        return builder.ToString();
    }

    private static string[] GetRows(string text)
    {
        return text.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries)
                   .Where(s => !string.IsNullOrWhiteSpace(s))
                   .ToArray();
    }

	private static string GetIndentation(string text)
	{
	    var row = GetRows(text)[0];
	    var xNamePartValue = @"x:Name=""PART_Value""";
	    var indexOf = row.IndexOf(xNamePartValue);
	    if (indexOf < 0)
	    {
	        return $"first attribute should  be: '{xNamePartValue}'";
	    }
	    return new string(' ', indexOf);
	}

	private static string RemoveEndTag(string text)
	{
	    return text.Substring(0, text.LastIndexOf("/>"))
	               .TrimEnd();
	}

    #>