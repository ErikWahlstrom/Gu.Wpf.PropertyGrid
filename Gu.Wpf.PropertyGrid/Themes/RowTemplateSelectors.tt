<#@ template language="C#" #>
<#@ include file="RowTemplateSelectors.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".xaml" #>
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:propertyGrid="clr-namespace:Gu.Wpf.PropertyGrid">
<#
    var prefix = "propertyGrid";
		var namesAndXamls = new[]
		{
			new NameAndXaml(prefix, "StringRow", StringValueXaml),
			new NameAndXaml(prefix, "BoolRow", CheckBoxValueXaml),
			new NameAndXaml(prefix, "CheckBoxRow", CheckBoxValueXaml),
			new NameAndXaml(prefix, "ToggleButtonRow", ToggleButtonValueXaml),
			new NameAndXaml(prefix, "EnumRow", EnumValueXaml),
			new NameAndXaml(prefix, "SelectorRow", ComboBoxValueXaml),
			new NameAndXaml(prefix, "ComboBoxRow", ComboBoxValueXaml),
		};
		foreach(var nameAndXaml in namesAndXamls)
		{
		#>

    <propertyGrid:RowControlTemplateSelector x:Key="<#= nameAndXaml.Name #>ControlTemplateSelector">
        <propertyGrid:RowControlTemplateSelector.PlainTemplate>
<#= GetPlainTemplate(nameAndXaml, TextBlockHeaderXaml, TextBlockSuffixXaml) #>
        </propertyGrid:RowControlTemplateSelector.PlainTemplate>

        <propertyGrid:RowControlTemplateSelector.TextBoxHeaderTemplate>
<#= GetPlainTemplate(nameAndXaml, TextBoxHeaderXaml, TextBlockSuffixXaml) #>            
        </propertyGrid:RowControlTemplateSelector.TextBoxHeaderTemplate>

        <propertyGrid:RowControlTemplateSelector.TextBoxHeaderAndSuffixTemplate>
<#= GetPlainTemplate(nameAndXaml, TextBoxHeaderXaml, TextBoxSuffixXaml) #>              
        </propertyGrid:RowControlTemplateSelector.TextBoxHeaderAndSuffixTemplate>

        <propertyGrid:RowControlTemplateSelector.TextBoxSuffixTemplate>
<#= GetPlainTemplate(nameAndXaml, TextBlockHeaderXaml, TextBoxSuffixXaml) #>              
        </propertyGrid:RowControlTemplateSelector.TextBoxSuffixTemplate>

        <propertyGrid:RowControlTemplateSelector.InfoTemplate>
<#= GetInfoTemplate(nameAndXaml, TextBlockHeaderXaml, TextBlockSuffixXaml, InfoPresenterXaml) #>
        </propertyGrid:RowControlTemplateSelector.InfoTemplate>

        <propertyGrid:RowControlTemplateSelector.TextBoxHeaderAndInfoTemplate>
<#= GetInfoTemplate(nameAndXaml, TextBoxHeaderXaml, TextBlockSuffixXaml, InfoPresenterXaml) #>
        </propertyGrid:RowControlTemplateSelector.TextBoxHeaderAndInfoTemplate>

        <propertyGrid:RowControlTemplateSelector.TextBoxHeaderAndSuffixAndInfoTemplate>
<#= GetInfoTemplate(nameAndXaml, TextBoxHeaderXaml, TextBoxSuffixXaml, InfoPresenterXaml) #>
        </propertyGrid:RowControlTemplateSelector.TextBoxHeaderAndSuffixAndInfoTemplate>

        <propertyGrid:RowControlTemplateSelector.TextBoxSuffixInfoTemplate>
<#= GetInfoTemplate(nameAndXaml, TextBlockHeaderXaml, TextBoxSuffixXaml, InfoPresenterXaml) #>
        </propertyGrid:RowControlTemplateSelector.TextBoxSuffixInfoTemplate>
    </propertyGrid:RowControlTemplateSelector>
<#
		} 
		#>
</ResourceDictionary>
<#+
    private const string StringValueXaml = 
	@"                        <TextBox x:Name=""PART_Value""
                                 IsReadOnly=""{TemplateBinding IsReadOnly}""
                                 Text=""{Binding Value,
                                                 RelativeSource={RelativeSource TemplatedParent},
                                                 UpdateSourceTrigger=PropertyChanged}"" />
	";

    private const string CheckBoxValueXaml = 
	@"                        <CheckBox x:Name=""PART_Value""
                                  HorizontalAlignment=""Center""
                                  VerticalAlignment=""Center""
                                  IsChecked=""{Binding Value,
                                                      RelativeSource={RelativeSource TemplatedParent}}""
                                  IsEnabled=""{Binding IsReadOnly,
                                                      RelativeSource={RelativeSource TemplatedParent},
                                                      Converter={x:Static propertyGrid:InvertBoolConverter.Default}}"" />
	";

	private const string ToggleButtonValueXaml = 
	@"                        <ToggleButton x:Name=""PART_Value""
                                      IsChecked=""{Binding Value,
                                                           RelativeSource={RelativeSource TemplatedParent}}""
                                      IsEnabled=""{TemplateBinding IsReadOnly,
                                                                   Converter={x:Static propertyGrid:InvertBoolConverter.Default}}"" />
	";

    private const string EnumValueXaml =
	 @"                        <ComboBox x:Name=""PART_Value""
                                  IsReadOnly=""{TemplateBinding IsReadOnly}""
                                  ItemsSource=""{TemplateBinding EnumValues}""
                                  SelectedItem=""{Binding Value,
                                                         RelativeSource={RelativeSource TemplatedParent},
                                                         UpdateSourceTrigger=PropertyChanged}"" />
	";

    private const string ComboBoxValueXaml =
	 @"                        <ComboBox x:Name=""PART_Value""
                                  IsReadOnly=""{TemplateBinding IsReadOnly}""
                                  ItemsSource=""{TemplateBinding ItemsSource}""
                                  SelectedItem=""{Binding Value,
                                                         RelativeSource={RelativeSource TemplatedParent},
                                                         UpdateSourceTrigger=PropertyChanged}"" />
	";

#>