<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
#pragma warning disable SA1402 // File may only contain a single class
namespace Gu.Wpf.PropertyGrid
{
    using System.Windows;

    public static partial class PropertyGrid
    {
<#
		var columns = new[]
		                       {
		                           new ColumnMetaData("Header"), 
								   new ColumnMetaData("Value"), 
								   new ColumnMetaData("Suffix")
		                       };

		foreach(var columnWidth in columns.SelectMany(x => x.Widths))
		{
		#>
        public static readonly DependencyProperty <#= columnWidth.PropertyName #>Property = DependencyProperty.RegisterAttached(
            "<#= columnWidth.PropertyName #>",
            typeof(<#= columnWidth.Type #>),
            typeof(PropertyGrid),
            new FrameworkPropertyMetadata(
                <#= columnWidth.DefaultValue #>,
                FrameworkPropertyMetadataOptions.AffectsMeasure | FrameworkPropertyMetadataOptions.AffectsArrange | FrameworkPropertyMetadataOptions.Inherits));

<#
		} 

		foreach(var columnWidth in columns.SelectMany(x => x.Widths))
		{
		#>

        public static void Set<#= columnWidth.PropertyName #>(this UIElement element, <#= columnWidth.Type #> value)
        {
            element.SetValue(<#= columnWidth.PropertyName #>Property, value);
        }

        [AttachedPropertyBrowsableForChildren(IncludeDescendants = false)]
        [AttachedPropertyBrowsableForType(typeof(UIElement))]
        public static <#= columnWidth.Type #> Get<#= columnWidth.PropertyName #>(this UIElement element)
        {
            return (<#= columnWidth.Type #>)element.GetValue(<#= columnWidth.PropertyName #>Property);
        }
<#      }
		 #>
    }
<#
    var controlNames = new[]
                           {
                               new ClassMetaData("Rows", false),
                               new ClassMetaData("Row", true),
                               new ClassMetaData("ContentRow", false)
                           };
		foreach(var controlName in controlNames)
		{
		 #>

    public <#= controlName.IsAbstract ? "abstract " : "" #>partial class <#= controlName.Name #>
    {
<#
			foreach(var columnWidth in columns.SelectMany(x => x.Widths))
			{
			 #>
        public static readonly DependencyProperty <#= columnWidth.PropertyName #>Property = PropertyGrid.<#= columnWidth.PropertyName #>Property.AddOwner(
            typeof(<#= controlName.Name #>),
            new FrameworkPropertyMetadata(
                <#= columnWidth.DefaultValue #>,
                FrameworkPropertyMetadataOptions.AffectsMeasure | FrameworkPropertyMetadataOptions.AffectsArrange | FrameworkPropertyMetadataOptions.Inherits));

<#
			} 

			foreach(var columnWidth in columns.SelectMany(x => x.Widths))
			{
			 #>

        public <#= columnWidth.Type #> <#= columnWidth.PropertyName #>
        {
            get { return (<#= columnWidth.Type #>)this.GetValue(<#= columnWidth.PropertyName #>Property); }
            set { this.SetValue(<#= columnWidth.PropertyName #>Property, value); }
        }
<#
			} 
			#>
    }
<#
		} 
		#>
}

<#+
   private class ClassMetaData
   {
       public readonly string Name;
       public readonly bool IsAbstract;

       public ClassMetaData(string name, bool isAbstract)
       {
           this.Name = name;
           this.IsAbstract = isAbstract;
       }
   }


    private class ColumnMetaData 
    {
        public readonly IReadOnlyList<WidthMetaData> Widths;

        public ColumnMetaData(string name)
        {
            this.Widths = new[]
                              {
                                  new WidthMetaData(name + "Width", "GridLength", "GridLength.Auto"),
                                  new WidthMetaData(name + "MinWidth", "double", "0.0"),
                                  new WidthMetaData(name + "MaxWidth", "double", "double.PositiveInfinity"),
                              };
        }
    }

    private class WidthMetaData
   {
        public readonly string PropertyName;
        public readonly string DefaultValue;
        public readonly string Type;

       public WidthMetaData(string propertyName, string type, string defaultValue)
       {
           this.PropertyName = propertyName;
           this.Type = type;
           this.DefaultValue = defaultValue;
       }
   }
#>
