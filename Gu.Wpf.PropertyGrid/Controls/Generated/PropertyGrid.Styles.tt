<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".generated.cs" #>
#pragma warning disable SA1402 // File may only contain a single class
namespace Gu.Wpf.PropertyGrid
{
    using System.Windows;

    public static partial class PropertyGrid
    {
<#
    var styles = new[]
                     {
                         "HeaderStyle",
                         "ValueStyle",
                         "SuffixStyle",
                         "InfoPresenterStyle",
                         "OldValueStyle",
                         "ErrorStyle", 
                     };
		foreach(var styleName in styles)
		{
		#>
        public static readonly DependencyProperty <#= styleName #>Property = DependencyProperty.RegisterAttached(
            "<#= styleName #>",
            typeof(Style),
            typeof(PropertyGrid),
            new FrameworkPropertyMetadata(
                default(Style),
                FrameworkPropertyMetadataOptions.Inherits));

<#
		} 

		foreach(var styleName in styles)
		{
		#>

        public static void Set<#= styleName #>(this UIElement element, Style value)
        {
            element.SetValue(<#= styleName #>Property, value);
        }

        [AttachedPropertyBrowsableForChildren(IncludeDescendants = false)]
        [AttachedPropertyBrowsableForType(typeof(UIElement))]
        public static Style Get<#= styleName #>(this UIElement element)
        {
            return (Style)element.GetValue(<#= styleName #>Property);
        }
<#      }
		 #>
    }

    public partial class Rows
    {
<#
			foreach(var styleName in styles)
			{
			 #>
        public static readonly DependencyProperty <#= styleName #>Property = PropertyGrid.<#= styleName #>Property.AddOwner(
            typeof(Rows),
            new FrameworkPropertyMetadata(
                default(Style),
                FrameworkPropertyMetadataOptions.Inherits));

<#
			} 

			foreach(var styleName in styles)
			{
			 #>

        public Style <#= styleName #>
        {
            get { return (Style)this.GetValue(<#= styleName #>Property); }
            set { this.SetValue(<#= styleName #>Property, value); }
        }
<#
			} 
			#>
    }
<#
       var controlNames = new[]
                           {
                               new ClassMetaData("Row", true),
                               new ClassMetaData("ContentRow", false)
                           };
		foreach(var controlName in controlNames)
		{
		 #>

    public <#= controlName.IsAbstract ? "abstract " : "" #>partial class <#= controlName.Name #>
    {
        public static readonly DependencyProperty ControlTemplateSelectorProperty = DependencyProperty.Register(
            nameof(ControlTemplateSelector),
            typeof(RowControlTemplateSelector),
            typeof(<#= controlName.Name #>),
            new PropertyMetadata(
               default(RowControlTemplateSelector),
               OnPartStyleChanged));

<#
			foreach(var styleName in styles)
			{
			 #>
        public static readonly DependencyProperty <#= styleName #>Property = PropertyGrid.<#= styleName #>Property.AddOwner(
            typeof(<#= controlName.Name #>),
            new FrameworkPropertyMetadata(
                default(Style),
                FrameworkPropertyMetadataOptions.Inherits,
                OnPartStyleChanged));

<#
			} #>
        public RowControlTemplateSelector ControlTemplateSelector
        {
            get { return (RowControlTemplateSelector)this.GetValue(ControlTemplateSelectorProperty); }
            set { this.SetValue(ControlTemplateSelectorProperty, value); }
        }
<#
			foreach(var styleName in styles)
			{
			 #>

        public Style <#= styleName #>
        {
            get { return (Style)this.GetValue(<#= styleName #>Property); }
            set { this.SetValue(<#= styleName #>Property, value); }
        }
<#
			} 
			#>

        private static void OnPartStyleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            ((<#= controlName.Name #>)d).UpdateTemplate();
        }
    }
<#
		} 
		#>
}
<#+
   private class ClassMetaData
   {
       public readonly string Name;
       public readonly bool IsAbstract;

       public ClassMetaData(string name, bool isAbstract)
       {
           this.Name = name;
           this.IsAbstract = isAbstract;
       }
   }
#>
