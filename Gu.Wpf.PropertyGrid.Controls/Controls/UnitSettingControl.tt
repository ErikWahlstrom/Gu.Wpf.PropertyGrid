<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\packages\Gu.Units\lib\net45\Gu.Units.dll" #>
<#@ assembly name="System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Gu.Units" #>
<#@ output extension=".generated.cs" #>
namespace Gu.PropertyGrid
{
    using System.Windows;
    using Gu.Units;
<#
	    var quantities = typeof (Length).Assembly.GetTypes()
											     .Where(x => !x.IsInterface)
											     .Where(x => x.GetInterfaces().Any(i => i == typeof (IQuantity))).ToArray();
		foreach(var quantity in quantities)
		{
		    var className = quantity.Name + "SettingControl";
		    var defaultUnit = GetDefaultUnitName(quantity);
		#>

    public class <#= className #> : UnitSettingControl<<#= quantity.Name #>, <#= quantity.Name #>Unit>
    {
        private static readonly <#= quantity.Name #>Unit DefaultUnit = <#= quantity.Name #>Unit.<#= defaultUnit #>;

        static <#= className #>()
        {
            DefaultStyleKeyProperty.OverrideMetadata(typeof(<#= className #>), new FrameworkPropertyMetadata(typeof(<#= className #>)));
            UnitProperty.OverrideMetadata(typeof(<#= className #>), new PropertyMetadata(DefaultUnit, OnUnitChanged));
            SuffixProperty.OverrideMetadata(typeof(<#= className #>), new PropertyMetadata(DefaultUnit.Symbol));
        }
    }
<#
		} 
		#>
}

<#+
    private static readonly Dictionary<Type, string> CustomUnits = new Dictionary<Type, string>
    {
        { typeof (Length), "Millimetres" },
        { typeof (Angle), "Degrees" },
        { typeof (Pressure), "Megapascals" },
    };

    private static string GetDefaultUnitName(Type quantityType)
    {
        string name;
        if (CustomUnits.TryGetValue(quantityType, out name))
        {
            return name;
        }

        var assembly = quantityType.Assembly;
        var unitName =quantityType.FullName + "Unit";
        var unitType = assembly.GetType(unitName, true);
        var fieldInfo = unitType.GetFields().First(f => f.FieldType == unitType);
        return fieldInfo.Name;
    }
#>