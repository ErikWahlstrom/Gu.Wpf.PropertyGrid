<#@ template language="C#" #>
<#@ include file="..\..\Gu.Wpf.PropertyGrid\Themes\RowTemplateSelectors.ttinclude" #><##>
<#@ assembly name="System.Core" #>
<#@ output extension=".xaml" #>
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:numeric="clr-namespace:Gu.Wpf.NumericInput;assembly=Gu.Wpf.NumericInput"
					xmlns:numericRows="clr-namespace:Gu.Wpf.PropertyGrid.NumericRows"
                    xmlns:propertyGrid="clr-namespace:Gu.Wpf.PropertyGrid;assembly=Gu.Wpf.PropertyGrid">
<#
    var prefix = "numericRows";
	var namesAndXamls = new[]
	{
		new NameAndXaml(prefix, "IntRow", IntValueXaml),
		new NameAndXaml(prefix, "DoubleRow", DoubleValueXaml),
	};
	foreach(var nameAndXaml in namesAndXamls)
	{
		#>

    <propertyGrid:RowControlTemplateSelector x:Key="<#= nameAndXaml.Name #>ControlTemplateSelector">
        <propertyGrid:RowControlTemplateSelector.PlainTemplate>
<#= GetPlainTemplate(nameAndXaml, TextBlockHeaderXaml, TextBlockSuffixXaml) #>
        </propertyGrid:RowControlTemplateSelector.PlainTemplate>

        <propertyGrid:RowControlTemplateSelector.TextBoxHeaderTemplate>
<#= GetPlainTemplate(nameAndXaml, TextBoxHeaderXaml, TextBlockSuffixXaml) #>            
        </propertyGrid:RowControlTemplateSelector.TextBoxHeaderTemplate>

        <propertyGrid:RowControlTemplateSelector.TextBoxHeaderAndSuffixTemplate>
<#= GetPlainTemplate(nameAndXaml, TextBoxHeaderXaml, TextBoxSuffixXaml) #>              
        </propertyGrid:RowControlTemplateSelector.TextBoxHeaderAndSuffixTemplate>

        <propertyGrid:RowControlTemplateSelector.TextBoxSuffixTemplate>
<#= GetPlainTemplate(nameAndXaml, TextBlockHeaderXaml, TextBoxSuffixXaml) #>              
        </propertyGrid:RowControlTemplateSelector.TextBoxSuffixTemplate>

        <propertyGrid:RowControlTemplateSelector.InfoTemplate>
<#= GetInfoTemplate(nameAndXaml, TextBlockHeaderXaml, TextBlockSuffixXaml, InfoPresenterXaml) #>
        </propertyGrid:RowControlTemplateSelector.InfoTemplate>

        <propertyGrid:RowControlTemplateSelector.TextBoxHeaderAndInfoTemplate>
<#= GetInfoTemplate(nameAndXaml, TextBoxHeaderXaml, TextBlockSuffixXaml, InfoPresenterXaml) #>
        </propertyGrid:RowControlTemplateSelector.TextBoxHeaderAndInfoTemplate>

        <propertyGrid:RowControlTemplateSelector.TextBoxHeaderAndSuffixAndInfoTemplate>
<#= GetInfoTemplate(nameAndXaml, TextBoxHeaderXaml, TextBoxSuffixXaml, InfoPresenterXaml) #>
        </propertyGrid:RowControlTemplateSelector.TextBoxHeaderAndSuffixAndInfoTemplate>

        <propertyGrid:RowControlTemplateSelector.TextBoxSuffixInfoTemplate>
<#= GetInfoTemplate(nameAndXaml, TextBlockHeaderXaml, TextBoxSuffixXaml, InfoPresenterXaml) #>
        </propertyGrid:RowControlTemplateSelector.TextBoxSuffixInfoTemplate>
    </propertyGrid:RowControlTemplateSelector>
<#
	} 
		#>
</ResourceDictionary>
<#+
    private const string IntValueXaml = 
	@"                        <numeric:IntBox x:Name=""PART_Value""
                                        CanValueBeNull=""{TemplateBinding CanValueBeNull}""
                                        IsReadOnly=""{TemplateBinding IsReadOnly}""
                                        MaxValue=""{TemplateBinding MaxValue}""
                                        MinValue=""{TemplateBinding MinValue}""
                                        Value=""{Binding Value,
                                                        RelativeSource={RelativeSource TemplatedParent},
                                                        UpdateSourceTrigger=PropertyChanged}"" />
	";

    private const string DoubleValueXaml =
        @"                        <numeric:DoubleBox x:Name=""PART_Value""
                                           CanValueBeNull=""{TemplateBinding CanValueBeNull}""
                                           DecimalDigits=""{TemplateBinding DecimalDigits}""
                                           IsReadOnly=""{TemplateBinding IsReadOnly}""
                                           MaxValue=""{TemplateBinding MaxValue}""
                                           MinValue=""{TemplateBinding MinValue}""
                                           Value=""{Binding Value,
                                                           RelativeSource={RelativeSource TemplatedParent},
                                                           UpdateSourceTrigger=PropertyChanged}"" />";

#>