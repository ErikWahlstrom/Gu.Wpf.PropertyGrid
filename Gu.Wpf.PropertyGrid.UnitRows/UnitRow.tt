<#@ template language="C#" #>
<#@ include file="Quantities.ttinclude" #>
<#@ output extension=".generated.cs" #>
#pragma warning disable SA1649 // File name must match first type name
#pragma warning disable SA1402 // File may only contain a single class
#pragma warning disable SA1118 // Parameter must not span multiple lines
namespace Gu.Wpf.PropertyGrid.UnitRows
{
    using System.Windows;
    using System.Windows.Data;
    using Gu.Units;
<#
	foreach(var quantityType in GetQuantityTypes())
	{
		var className = quantityType.Name + "Row";
		#>

    public class <#= className #> : UnitRowGeneric<<#= quantityType.Name #>, <#= quantityType.Name #>Unit>
    {
        public static readonly <#= quantityType.Name #>Unit DefaultUnit = default(<#= quantityType.Name #>Unit).SiUnit;

        static <#= className #>()
        {
            DefaultStyleKeyProperty.OverrideMetadata(typeof(<#= className #>), new FrameworkPropertyMetadata(typeof(<#= className #>)));
            UnitProperty.OverrideMetadata(typeof(<#= className #>), new PropertyMetadata(DefaultUnit, OnUnitChanged));
            SuffixProperty.OverrideMetadata(
                typeof(<#= className #>),
                new FrameworkPropertyMetadata(
                    CreateSuffix(DefaultUnit, UnitRow.DefaultSymbolFormat),
                    FrameworkPropertyMetadataOptions.NotDataBindable));

            ValueProperty.OverrideMetadataWithUpdateSourceTrigger(typeof(<#= className #>), UpdateSourceTrigger.LostFocus);
        }
    }
<#
	} 
		#>
}
